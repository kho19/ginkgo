add_executable(spgemm spgemm.cpp)
add_executable(spgemm64 spgemm.cpp)
target_link_libraries(spgemm ginkgo gflags rapidjson)
target_link_libraries(spgemm64 ginkgo gflags rapidjson)
target_compile_definitions(spgemm64 PRIVATE GKO_SPGEMM_LONG)
option(GINKGO_SPGEMM_BUILD_NSPARSE "Build nsparse for the SpGEMM benchmarks (run benchmark/spgemm/third_party/download_external.sh first!)")
option(GINKGO_SPGEMM_BUILD_ACSPGEMM "Build ACSpGEMM for the SpGEMM benchmarks (run benchmark/spgemm/third_party/download_external.sh first!)")
option(GINKGO_SPGEMM_BUILD_SPECK "Build spECK for the SpGEMM benchmarks (run benchmark/spgemm/third_party/download_external.sh first!)")
option(GINKGO_SPGEMM_BUILD_KOKKOS "Build kokkos-kernels for the SpGEMM benchmarks (run benchmark/spgemm/third_party/download_external.sh first!)")
if(GINKGO_SPGEMM_BUILD_NSPARSE OR GINKGO_SPGEMM_BUILD_ACSPGEMM OR GINKGO_SPGEMM_BUILD_SPECK OR GINKGO_SPGEMM_BUILD_KOKKOS)
    add_subdirectory(third_party)
endif()
if(GINKGO_SPGEMM_BUILD_NSPARSE)
    target_link_libraries(spgemm spgemm-wrapper-nsparse)
    target_compile_definitions(spgemm PRIVATE GKO_SPGEMM_HAS_NSPARSE)
endif()
if(GINKGO_SPGEMM_BUILD_ACSPGEMM)
    target_link_libraries(spgemm spgemm-wrapper-acspgemm)
    target_compile_definitions(spgemm PRIVATE GKO_SPGEMM_HAS_ACSPGEMM)
endif()
if(GINKGO_SPGEMM_BUILD_SPECK)
    target_link_libraries(spgemm spgemm-wrapper-speck)
    target_compile_definitions(spgemm PRIVATE GKO_SPGEMM_HAS_SPECK)
endif()
if(GINKGO_SPGEMM_BUILD_KOKKOS)
    target_link_libraries(spgemm spgemm-wrapper-kokkos)
    target_compile_definitions(spgemm PRIVATE GKO_SPGEMM_HAS_KOKKOS)
endif()
